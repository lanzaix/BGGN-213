---
title: "class 12"
format: pdf
---

```{r,message=FALSE,warning=FALSE}
library(BiocManager)
library(DESeq2)
```

```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")
```

```{r}
nrow(counts)
```
```{r}
metadata
```
Q1. How many genes are in this dataset? 38694

Q2. How many ‘control’ cell lines do we have? 4

Q3. How would you make the above code in either approach more robust? Following the below code instead the class website code

```{r}
#control <- metadata[metadata[,"dex"]=="control",]
#control.counts <- counts[ ,control$id]
#control.mean <- rowSums( control.counts )/4 
#head(control.mean)
```


```{r}
control.inds <- metadata$dex=="control"
control.ids <- metadata[control.inds,"id"]
control.counts <- counts[,control.ids]
head(control.counts)
```

```{r}
control.mean <- rowMeans(control.counts)
head(control.mean)
```

Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean)

```{r}
treated.inds <- metadata$dex=="treated"
treated.ids <- metadata[treated.inds,"id"]
treated.counts <- counts[,treated.ids]
head(treated.counts)
```


```{r}
treated.mean <- rowMeans(treated.counts)
head(treated.mean)
```

```{r}
meancounts <- data.frame(control.mean, treated.mean)
```

Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples. Your plot should look something like the following.

```{r}
plot(meancounts,xlab="Control",ylab="Treated")
```

Q5 (b).You could also use the ggplot2 package to make this figure producing the plot below. What geom_?() function would you use for this plot? 
geom_point

```{r}
library(ggplot2)
```

```{r}
ggplot(meancounts)+aes(control.mean,treated.mean)+geom_point()
```

Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this? log

```{r}
plot(meancounts,log="xy")
```
```{r}
meancounts$log2fc <- log2(meancounts[,"treated.mean"]/meancounts[,"control.mean"])
head(meancounts)
```

Q7. What is the purpose of the arr.ind argument in the which() function call above? Why would we then take the first column of the output and need to call the unique() function? 
The arr.ind will cause which() to return all the TRUE values in both the row and column. Calling unique() will ensure we dont count any row twice if it has zer entries in both samples.

```{r}
#zero.vals <- which(meancounts[,1:2]==0, arr.ind=TRUE)

#to.rm <- unique(zero.vals[,1])
#mycounts <- meancounts[-to.rm,]
#head(mycounts)
```


```{r}
to.keep.inds <- rowSums(meancounts[,1:2] == 0) ==0
mycounts <- meancounts[to.keep.inds,]
nrow(mycounts)
```

Q8. Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level? 250

Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level? 367

Q10. Do you trust these results? Why or why not? fold change can be large (e.g. >>two-fold up- or down-regulation) without being statistically significant (e.g. based on p-values

```{r}
up.ind <- mycounts$log2fc > 2
down.ind <- mycounts$log2fc < (-2)
sum(up.ind)
sum(down.ind)
```


```{r}
sum(mycounts$log2fc >= 2)
```

```{r}
library(DESeq2)
```

```{r}
dds <- DESeqDataSetFromMatrix(countData=counts, 
                              colData=metadata, 
                              design=~dex)
dds
```


```{r}
dds <- DESeq(dds)
res <- results(dds)
res <- as.data.frame(res)
#res
```
```{r}
summary(res)
```

```{r}
#plot( res$log2FoldChange,  res$padj)
```


```{r}
mycols <- rep("grey", nrow(res))
mycols[abs(res$log2FoldChange) > 2]  <- "red" 

inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2)
mycols[inds] <- "blue"


plot( res$log2FoldChange,  -log(res$padj),  col=mycols,
      xlab="Log2(FoldChange)",
      ylab="-Log(P-value)")
abline(v=c(-2,2), col="red")
abline(h=-log(0.05), col="red")
```

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```

```{r}
columns(org.Hs.eg.db)
```


```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                    keys=row.names(res), 
                    keytype="ENSEMBL",
                    column="SYMBOL",
                    multiVals="first")
res$entrez <- mapIds(org.Hs.eg.db,
                    keys=row.names(res),
                    keytype="ENSEMBL",
                    column="ENTREZID",
                    multiVals="first")
```


```{r}
res$genename <- mapIds(org.Hs.eg.db,
                    keys=row.names(res),
                    keytype="ENSEMBL",
                    column="GENENAME",
                    multiVals="first")

head(res)
```

```{r}
library(pathview)
```

```{r}
library(gage)
library(gageData)

data(kegg.sets.hs)
data(sigmet.idx.hs)
```

```{r}
kegg.sets.hs = kegg.sets.hs[sigmet.idx.hs]
head(kegg.sets.hs)
```

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

```{r}
keggres = gage(foldchanges, gsets=kegg.sets.hs)
attributes(keggres)
```

```{r}
head(keggres$less,5)
```

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310")
```

![The asthama pathway with hsa05310 gene](hsa05310.pathview.png)

